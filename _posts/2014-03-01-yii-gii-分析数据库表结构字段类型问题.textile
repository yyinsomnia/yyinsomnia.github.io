---
layout: post
title: Yii gii 分析数据库表结构字段类型问题
---

h1. {{ page.title }}

<p class="meta">1 Mar 2014 - Beijing</p>

最近用Yii来写公司api项目的时候发现，有不少地方int型字段分析后在AR类里面是string型。
最后同事发现把int型的unsigned勾上则分析为string 不勾则分析为int
通过查看Yii源代码发现如下(mysql)
{% highlight php %}
protected function extractType($dbType)
{
    if(strncmp($dbType,'enum',4)===0)
	$this->type='string';
    elseif(strpos($dbType,'float')!==false || strpos($dbType,'double')!==false)
	$this->type='double';
    elseif(strpos($dbType,'bool')!==false)
	$this->type='boolean';
    elseif(strpos($dbType,'int')===0 && strpos($dbType,'unsigned')===false || preg_match('/(bit|tinyint|smallint|mediumint)/',$dbType))
	$this->type='integer';
    else
	$this->type='string';
}
{% endhighlight %}

代码写的很清楚了，至于为什么要这么做？
qiang.xue
This is expected because unsigned int may lose precision if represented as PHP int.

查看官网文档有这一段话
The size of an integer is platform-dependent, although a maximum value of about two billion is the usual value (that's 32 bits signed). 64-bit platforms usually have a maximum value of about 9E18. PHP does not support unsigned integers. Integer size can be determined using the constant PHP_INT_SIZE, and maximum value using the constant PHP_INT_MAX since PHP 4.4.0 and PHP 5.0.5.

如果是32-bit platforms 把mysql里面的unsigned int 解析成int的话如果数据库里面该值大于2147483647，就会出现问题。
所以并不是Yii做不到而是考虑周全了而已，在公司的生产测试平台几乎都是64-bit linux 所以该问题在此范围内可以被忽略，可以手动修改为int型号。
